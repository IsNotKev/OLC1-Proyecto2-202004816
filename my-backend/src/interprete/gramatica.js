/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,26],$V3=[1,24],$V4=[1,25],$V5=[1,22],$V6=[1,23],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,21],$Vd=[1,19],$Ve=[1,20],$Vf=[5,10,12,17,23,24,25,27,34,35,36,37,38,39,42,77,78],$Vg=[1,33],$Vh=[28,44],$Vi=[2,54],$Vj=[1,44],$Vk=[1,45],$Vl=[1,49],$Vm=[1,52],$Vn=[11,28,44],$Vo=[5,10,12,17,18,23,24,25,27,34,35,36,37,38,39,42,48,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$Vp=[1,67],$Vq=[1,80],$Vr=[1,64],$Vs=[1,66],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[11,21],$VL=[1,101],$VM=[1,125],$VN=[1,126],$VO=[1,112],$VP=[1,110],$VQ=[1,111],$VR=[1,113],$VS=[1,114],$VT=[1,115],$VU=[1,116],$VV=[1,117],$VW=[1,118],$VX=[1,119],$VY=[1,120],$VZ=[1,121],$V_=[1,122],$V$=[1,123],$V01=[1,124],$V11=[11,21,28,30,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63],$V21=[1,145],$V31=[30,41],$V41=[21,28],$V51=[25,41],$V61=[5,10,12,17,23,24,25,27,34,35,36,37,38,39,40,42,77,78],$V71=[11,21,28,30,48,49,50,51,52,55,56,57,58,59,60,62,63],$V81=[11,21,28,30,48,49,50,55,56,57,58,59,60,62,63],$V91=[11,21,28,30],$Va1=[11,21,28,30,49,55,56,62,63],$Vb1=[11,21,28,30,49,55,56,57,58,59,60,62,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"declaracion":7,"print":8,"if":9,"BREAK":10,"PUNTOYCOMA":11,"CONTINUE":12,"metodo":13,"llamado":14,"while":15,"for":16,"FOR":17,"PAR_ABRE":18,"expresion":19,"asignaciones":20,"PAR_CIERRA":21,"statement":22,"WHILE":23,"DO":24,"IDENTIFICADOR":25,"pp":26,"RUN":27,"COMA":28,"pars":29,"DOSPUNTOS":30,"VOID":31,"tipos":32,"parametros":33,"INT":34,"DOUBLE":35,"CHAR":36,"STRING":37,"BOOLEAN":38,"IF":39,"ELSE":40,"LLAVE_ABRE":41,"LLAVE_CIERRA":42,"listaid":43,"IGUAL":44,"INCREMENTO":45,"DECREMENTO":46,"mmuno":47,"MENOS":48,"INTERROGACION":49,"MAS":50,"POR":51,"DIVIDIR":52,"POTENCIA":53,"MODULO":54,"D_IGUAL":55,"DIFERENTE":56,"MAYOR_IGUAL":57,"MENOR_IGUAL":58,"MAYOR":59,"MENOR":60,"NOT":61,"AND":62,"OR":63,"nums":64,"TOSTRING":65,"TOLOWER":66,"TOUPPER":67,"ROUND":68,"TYPEOF":69,"LENGTH":70,"ENTERO":71,"CADENA":72,"CARACTER":73,"DECIMAL":74,"TRUE":75,"FALSE":76,"PRINTLN":77,"PRINT":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"BREAK",11:"PUNTOYCOMA",12:"CONTINUE",17:"FOR",18:"PAR_ABRE",21:"PAR_CIERRA",23:"WHILE",24:"DO",25:"IDENTIFICADOR",27:"RUN",28:"COMA",30:"DOSPUNTOS",31:"VOID",34:"INT",35:"DOUBLE",36:"CHAR",37:"STRING",38:"BOOLEAN",39:"IF",40:"ELSE",41:"LLAVE_ABRE",42:"LLAVE_CIERRA",44:"IGUAL",45:"INCREMENTO",46:"DECREMENTO",48:"MENOS",49:"INTERROGACION",50:"MAS",51:"POR",52:"DIVIDIR",53:"POTENCIA",54:"MODULO",55:"D_IGUAL",56:"DIFERENTE",57:"MAYOR_IGUAL",58:"MENOR_IGUAL",59:"MAYOR",60:"MENOR",61:"NOT",62:"AND",63:"OR",65:"TOSTRING",66:"TOLOWER",67:"TOUPPER",68:"ROUND",69:"TYPEOF",70:"LENGTH",71:"ENTERO",72:"CADENA",73:"CARACTER",74:"DECIMAL",75:"TRUE",76:"FALSE",77:"PRINTLN",78:"PRINT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[16,8],[15,5],[15,7],[14,5],[14,4],[14,6],[14,5],[26,3],[26,1],[13,5],[13,3],[13,5],[29,3],[29,2],[33,4],[33,2],[32,1],[32,1],[32,1],[32,1],[32,1],[9,5],[9,7],[9,7],[22,3],[22,2],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,2],[20,3],[20,2],[20,2],[43,3],[43,1],[47,2],[47,2],[19,2],[19,1],[19,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[19,3],[19,4],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[64,1],[64,1],[64,1],[8,5],[8,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 54:
this.$=[$$[$0]]
break;
case 7:
 this.$ = instruccionesAPI.nuevoBreak(); 
break;
case 8:
 this.$ = instruccionesAPI.nuevoContinue(); 
break;
case 13:
 this.$ = instruccionesAPI.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 14:
 this.$ = instruccionesAPI.nuevoMientras($$[$0-2],$$[$0]); 
break;
case 15:
 this.$ = instruccionesAPI.nuevoDoMientras($$[$0-2],$$[$0-5]); 
break;
case 16: case 18:
 this.$ = instruccionesAPI.nuevoLlamar($$[$0-4],$$[$0-2]); 
break;
case 17: case 19:
 this.$ = instruccionesAPI.nuevoLlamar($$[$0-3],[]); 
break;
case 20:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 21:
 this.$ = [$$[$0]] 
break;
case 22:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0],TIPO_VALOR.VOID); 
break;
case 23:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-2],$$[$0-1],$$[$0],TIPO_VALOR.VOID); 
break;
case 24:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0],$$[$0-1]); 
break;
case 25:
this.$ = $$[$0-1];
break;
case 26:
this.$ = [];
break;
case 27:
 $$[$0-3].push(instruccionesAPI.nuevoParametro($$[$0-1],$$[$0])); this.$=$$[$0-3]; 
break;
case 28:
 this.$ = [instruccionesAPI.nuevoParametro($$[$0-1],$$[$0])]; 
break;
case 29:
 this.$ = TIPO_VALOR.ENTERO; 
break;
case 30:
 this.$ = TIPO_VALOR.DOUBLE; 
break;
case 31:
 this.$ = TIPO_VALOR.CARACTER; 
break;
case 32:
 this.$ = TIPO_VALOR.CADENA; 
break;
case 33:
 this.$ = TIPO_VALOR.BOOLEAN; 
break;
case 34:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]);
break;
case 35: case 36:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 37: case 49:
 this.$ = $$[$0-1]; 
break;
case 38:
 this.$ = []; 
break;
case 39:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.ENTERO,$$[$0-1]); 
break;
case 40:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.ENTERO,instruccionesAPI.nuevoValor(0, TIPO_VALOR.ENTERO)); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.DOUBLE,$$[$0-1]); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.DOUBLE,instruccionesAPI.nuevoValor(0.0, TIPO_VALOR.DOUBLE)); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.CARACTER,$$[$0-1]); 
break;
case 44:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.CARACTER,instruccionesAPI.nuevoValor('', TIPO_VALOR.CARACTER)); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.CADENA,$$[$0-1]); 
break;
case 46:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.CADENA,instruccionesAPI.nuevoValor("", TIPO_VALOR.CADENA)); 
break;
case 47:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.BOOLEAN,$$[$0-1]); 
break;
case 48:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.BOOLEAN,instruccionesAPI.nuevoValor('TRUE', TIPO_VALOR.BOOLEAN)); 
break;
case 50:
 this.$ = instruccionesAPI.nuevoAsignacion($$[$0-2],$$[$0]); 
break;
case 51:
 this.$ = instruccionesAPI.nuevoAsignacion([$$[$0-1]],instruccionesAPI.nuevoOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR),TIPO_OPERACION.INCREMENTO)); 
break;
case 52:
 this.$ = instruccionesAPI.nuevoAsignacion([$$[$0-1]],instruccionesAPI.nuevoOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR),TIPO_OPERACION.DECREMENTO)); 
break;
case 53:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 55:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.INCREMENTO); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.DECREMENTO); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 58:
 this.$=$$[$0]; 
break;
case 59:
 this.$ = instruccionesAPI.nuevoOperadorTernario($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 75:
 this.$ = instruccionesAPI.nuevoCasteo($$[$0-2],$$[$0]);
break;
case 76:
 this.$ = instruccionesAPI.nuevoCasteo(TIPO_VALOR.CADENA,$$[$0-1]);
break;
case 77:
 this.$ = instruccionesAPI.nuevoToLower($$[$0-1]); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoToUpper($$[$0-1]); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoRound($$[$0-1]); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoTypeOf($$[$0-1]); 
break;
case 81:
 this.$= $$[$0-1] 
break;
case 82:
 this.$ = instruccionesAPI.nuevoLength($$[$0-1]); 
break;
case 83:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DOUBLE); 
break;
case 87: case 88:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN); 
break;
case 89:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 90:
this.$ = TIPO_VALOR.ENTERO;
break;
case 91:
this.$ = TIPO_VALOR.DOUBLE;
break;
case 92:
this.$ = TIPO_VALOR.CARACTER;
break;
case 93:
this.$ = instruccionesAPI.nuevoImprimirLn($$[$0-2]);
break;
case 94:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,12:$V1,13:9,14:10,15:11,16:12,17:$V2,20:18,23:$V3,24:$V4,25:$V5,27:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,43:27,77:$Vd,78:$Ve},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:$V0,12:$V1,13:9,14:10,15:11,16:12,17:$V2,20:18,23:$V3,24:$V4,25:$V5,27:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,43:27,77:$Vd,78:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),{11:[1,30]},{11:[1,31]},o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),{25:$Vg,43:32},{25:$Vg,43:34},{25:$Vg,43:35},{25:$Vg,43:36},{25:$Vg,43:37},{11:[1,38]},{18:[1,39]},{18:[1,40]},{18:[1,41]},o($Vh,$Vi,{29:42,18:[1,43],45:$Vj,46:$Vk}),{25:[1,46]},{18:[1,47]},{22:48,41:$Vl},{18:[1,50]},{28:$Vm,44:[1,51]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,7]),o($Vf,[2,8]),{11:[1,54],28:$Vm,44:[1,53]},o($Vn,$Vi),{11:[1,56],28:$Vm,44:[1,55]},{11:[1,58],28:$Vm,44:[1,57]},{11:[1,60],28:$Vm,44:[1,59]},{11:[1,62],28:$Vm,44:[1,61]},o($Vo,[2,49]),{18:$Vp,19:63,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:81,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:82,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{22:84,30:[1,83],41:$Vl},{18:$Vp,19:88,21:[1,86],25:$Vq,26:85,32:89,33:87,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($VK,[2,51]),o($VK,[2,52]),{18:[1,95]},{18:$Vp,19:96,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{23:[1,97]},{4:98,6:3,7:4,8:5,9:6,10:$V0,12:$V1,13:9,14:10,15:11,16:12,17:$V2,20:18,23:$V3,24:$V4,25:$V5,27:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,42:[1,99],43:27,77:$Vd,78:$Ve},{7:100,20:18,25:$VL,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,43:27},{18:$Vp,19:102,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{25:[1,103]},{18:$Vp,19:104,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vo,[2,40]),{18:$Vp,19:105,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vo,[2,42]),{18:$Vp,19:106,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vo,[2,44]),{18:$Vp,19:107,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vo,[2,46]),{18:$Vp,19:108,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vo,[2,48]),{21:[1,109],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{18:$Vp,19:127,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($V11,[2,58]),{18:$Vp,19:128,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:130,25:$Vq,34:[1,131],35:[1,132],36:[1,133],47:65,48:$Vr,61:$Vs,64:129,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:[1,134]},{18:[1,135]},{18:[1,136]},{18:[1,137]},{18:[1,138]},{18:[1,139]},o($V11,[2,83]),o($V11,[2,84]),o($V11,[2,85]),o($V11,[2,86]),o($V11,[2,87]),o($V11,[2,88]),o($V11,[2,89]),{21:[1,140],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[1,141],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{31:[1,142],32:143,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ},o($Vf,[2,23]),{21:[1,144],28:$V21},o($V31,[2,26],{11:[1,146]}),{21:[1,147],28:[1,148]},o($V41,[2,21],{45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),{25:[1,149]},o($V51,[2,29]),o($V51,[2,30]),o($V51,[2,31]),o($V51,[2,32]),o($V51,[2,33]),{18:$Vp,19:88,21:[1,151],25:$Vq,26:150,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{21:[1,152],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{18:[1,153]},{6:29,7:4,8:5,9:6,10:$V0,12:$V1,13:9,14:10,15:11,16:12,17:$V2,20:18,23:$V3,24:$V4,25:$V5,27:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,42:[1,154],43:27,77:$Vd,78:$Ve},o($V61,[2,38]),{18:$Vp,19:155,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vh,$Vi,{45:$Vj,46:$Vk}),o($VK,[2,50],{45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),o($Vn,[2,53]),{11:[1,156],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{11:[1,157],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{11:[1,158],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{11:[1,159],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{11:[1,160],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{11:[1,161]},{18:$Vp,19:162,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:163,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:164,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:165,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:166,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:167,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:168,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:169,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:170,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:171,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:172,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:173,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:174,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:175,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:176,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($V11,[2,55]),o($V11,[2,56]),o($V71,[2,57],{45:$VM,46:$VN,53:$VT,54:$VU}),o($V71,[2,72],{45:$VM,46:$VN,53:$VT,54:$VU}),{21:[1,177]},{21:[1,178],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[2,90]},{21:[2,91]},{21:[2,92]},{18:$Vp,19:179,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:180,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:181,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:182,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:183,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{18:$Vp,19:184,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},{11:[1,185]},{22:186,41:$Vl},{22:187,41:$Vl},{22:188,41:$Vl},{11:[1,189]},{18:$Vp,19:190,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($Vf,[2,17]),o($V31,[2,25]),{32:191,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ},o($V41,[2,28]),{21:[1,192],28:$V21},{11:[1,193]},{22:194,41:$Vl},{18:$Vp,19:195,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($V61,[2,37]),{11:[1,196],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},o($Vo,[2,39]),o($Vo,[2,41]),o($Vo,[2,43]),o($Vo,[2,45]),o($Vo,[2,47]),o($Vf,[2,93]),{30:[1,197],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},o($V81,[2,60],{45:$VM,46:$VN,51:$VR,52:$VS,53:$VT,54:$VU}),o($V81,[2,61],{45:$VM,46:$VN,51:$VR,52:$VS,53:$VT,54:$VU}),o($V71,[2,62],{45:$VM,46:$VN,53:$VT,54:$VU}),o($V71,[2,63],{45:$VM,46:$VN,53:$VT,54:$VU}),o($V91,[2,64],{45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),o($V91,[2,65],{45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),o($Va1,[2,66],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,57:$VX,58:$VY,59:$VZ,60:$V_}),o($Va1,[2,67],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,57:$VX,58:$VY,59:$VZ,60:$V_}),o($Vb1,[2,68],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU}),o($Vb1,[2,69],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU}),o($Vb1,[2,70],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU}),o($Vb1,[2,71],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU}),o([11,21,28,30,49,62,63],[2,73],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_}),o([11,21,28,30,49,63],[2,74],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$}),{18:$Vp,19:198,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($V11,[2,81]),{21:[1,199],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[1,200],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[1,201],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[1,202],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[1,203],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{21:[1,204],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},o($Vf,[2,94]),o($Vf,[2,34],{40:[1,205]}),o($Vf,[2,22]),o($Vf,[2,24]),o($Vf,[2,16]),o($V41,[2,20],{45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),{25:[1,206]},{11:[1,207]},o($Vf,[2,19]),o($Vf,[2,14]),{21:[1,208],45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01},{20:209,25:$VL,43:27},{18:$Vp,19:210,25:$Vq,47:65,48:$Vr,61:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE},o($V91,[2,75],{45:$VM,46:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),o($V11,[2,76]),o($V11,[2,77]),o($V11,[2,78]),o($V11,[2,79]),o($V11,[2,80]),o($V11,[2,82]),{9:212,22:211,39:$Vc,41:$Vl},o($V41,[2,27]),o($Vf,[2,18]),{11:[1,213]},{21:[1,214]},o([11,21,28,30,49],[2,59],{45:$VM,46:$VN,48:$VO,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,62:$V$,63:$V01}),o($Vf,[2,35]),o($Vf,[2,36]),o($Vf,[2,15]),{22:215,41:$Vl},o($Vf,[2,13])],
defaultActions: {28:[2,1],131:[2,90],132:[2,91],133:[2,92]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 5:return "INT";
break;
case 6:return "DOUBLE";
break;
case 7:return "BOOLEAN";
break;
case 8:return "CHAR";
break;
case 9:return "STRING";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return 11;
break;
case 13:return 28;
break;
case 14:return 39;
break;
case 15:return 40;
break;
case 16:return 'SWITCH';
break;
case 17:return 'CASE';
break;
case 18:return 'DEFAULT';
break;
case 19:return 10;
break;
case 20:return 23;
break;
case 21:return 17;
break;
case 22:return 24;
break;
case 23:return 12;
break;
case 24:return 'RETURN';
break;
case 25:return 78;
break;
case 26:return 77;
break;
case 27:return 66;
break;
case 28:return 67;
break;
case 29:return 68;
break;
case 30:return 70;
break;
case 31:return 69;
break;
case 32:return 65;
break;
case 33:return 'TOCHARARRAY';
break;
case 34:return 27;
break;
case 35:return 31;
break;
case 36:return "INCREMENTO";
break;
case 37:return "DECREMENTO";
break;
case 38:return "MAS";
break;
case 39:return "MENOS";
break;
case 40:return "POR";
break;
case 41:return "DIVIDIR";
break;
case 42:return "POTENCIA";
break;
case 43:return "MODULO";
break;
case 44:return 55;
break;
case 45:return 58;
break;
case 46:return 60;
break;
case 47:return 57;                     
break;
case 48:return 59;
break;
case 49:return 56;
break;
case 50:return 44;
break;
case 51:return 63;
break;
case 52:return 62;
break;
case 53:return 61;
break;
case 54:return 49;
break;
case 55:return 30;
break;
case 56:return 18;
break;
case 57:return 21;
break;
case 58:return 41;
break;
case 59:return 42;
break;
case 60:return 'C_ABRE';
break;
case 61:return 'C_CIERRA';
break;
case 62:return 74;
break;
case 63:return 71;
break;
case 64:return 25;
break;
case 65:return 5;
break;
case 66:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:'(\\(n|"|'|\\|t|r)|.)')/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}