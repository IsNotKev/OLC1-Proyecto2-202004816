/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,24],$V2=[1,22],$V3=[1,23],$V4=[1,21],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,20],$Vb=[1,18],$Vc=[1,19],$Vd=[5,10,16,22,23,24,32,33,34,35,36,37,40,74,75],$Ve=[1,30],$Vf=[26,42],$Vg=[2,51],$Vh=[1,41],$Vi=[1,42],$Vj=[1,45],$Vk=[1,48],$Vl=[11,26,42],$Vm=[5,10,16,17,22,23,24,32,33,34,35,36,37,40,46,59,63,64,65,66,67,68,69,70,71,72,73,74,75],$Vn=[1,63],$Vo=[1,75],$Vp=[1,60],$Vq=[1,62],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[11,20],$VI=[1,95],$VJ=[1,119],$VK=[1,120],$VL=[1,106],$VM=[1,104],$VN=[1,105],$VO=[1,107],$VP=[1,108],$VQ=[1,109],$VR=[1,110],$VS=[1,111],$VT=[1,112],$VU=[1,113],$VV=[1,114],$VW=[1,115],$VX=[1,116],$VY=[1,117],$VZ=[1,118],$V_=[11,20,26,28,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61],$V$=[28,39],$V01=[20,26],$V11=[24,39],$V21=[5,10,16,22,23,24,32,33,34,35,36,37,38,40,74,75],$V31=[11,20,26,28,46,47,48,49,50,53,54,55,56,57,58,60,61],$V41=[11,20,26,28,46,47,48,53,54,55,56,57,58,60,61],$V51=[11,20,26,28],$V61=[11,20,26,28,47,53,54,60,61],$V71=[11,20,26,28,47,53,54,55,56,57,58,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"declaracion":7,"print":8,"if":9,"BREAK":10,"PUNTOYCOMA":11,"metodo":12,"llamado":13,"while":14,"for":15,"FOR":16,"PAR_ABRE":17,"expresion":18,"asignaciones":19,"PAR_CIERRA":20,"statement":21,"WHILE":22,"DO":23,"IDENTIFICADOR":24,"pp":25,"COMA":26,"pars":27,"DOSPUNTOS":28,"VOID":29,"tipos":30,"parametros":31,"INT":32,"DOUBLE":33,"CHAR":34,"STRING":35,"BOOLEAN":36,"IF":37,"ELSE":38,"LLAVE_ABRE":39,"LLAVE_CIERRA":40,"listaid":41,"IGUAL":42,"INCREMENTO":43,"DECREMENTO":44,"mmuno":45,"MENOS":46,"INTERROGACION":47,"MAS":48,"POR":49,"DIVIDIR":50,"POTENCIA":51,"MODULO":52,"D_IGUAL":53,"DIFERENTE":54,"MAYOR_IGUAL":55,"MENOR_IGUAL":56,"MAYOR":57,"MENOR":58,"NOT":59,"AND":60,"OR":61,"nums":62,"TOSTRING":63,"TOLOWER":64,"TOUPPER":65,"ROUND":66,"TYPEOF":67,"ENTERO":68,"CADENA":69,"CARACTER":70,"DECIMAL":71,"TRUE":72,"FALSE":73,"PRINTLN":74,"PRINT":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"BREAK",11:"PUNTOYCOMA",16:"FOR",17:"PAR_ABRE",20:"PAR_CIERRA",22:"WHILE",23:"DO",24:"IDENTIFICADOR",26:"COMA",28:"DOSPUNTOS",29:"VOID",32:"INT",33:"DOUBLE",34:"CHAR",35:"STRING",36:"BOOLEAN",37:"IF",38:"ELSE",39:"LLAVE_ABRE",40:"LLAVE_CIERRA",42:"IGUAL",43:"INCREMENTO",44:"DECREMENTO",46:"MENOS",47:"INTERROGACION",48:"MAS",49:"POR",50:"DIVIDIR",51:"POTENCIA",52:"MODULO",53:"D_IGUAL",54:"DIFERENTE",55:"MAYOR_IGUAL",56:"MENOR_IGUAL",57:"MAYOR",58:"MENOR",59:"NOT",60:"AND",61:"OR",63:"TOSTRING",64:"TOLOWER",65:"TOUPPER",66:"ROUND",67:"TYPEOF",68:"ENTERO",69:"CADENA",70:"CARACTER",71:"DECIMAL",72:"TRUE",73:"FALSE",74:"PRINTLN",75:"PRINT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[15,8],[14,5],[14,7],[13,5],[13,4],[25,3],[25,1],[12,5],[12,3],[12,5],[27,3],[27,2],[31,4],[31,2],[30,1],[30,1],[30,1],[30,1],[30,1],[9,5],[9,7],[9,7],[21,3],[21,2],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,2],[19,3],[19,2],[19,2],[41,3],[41,1],[45,2],[45,2],[18,2],[18,1],[18,5],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,3],[18,3],[18,4],[18,4],[18,4],[18,4],[18,4],[18,4],[18,3],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[62,1],[62,1],[62,1],[8,5],[8,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 51:
this.$=[$$[$0]]
break;
case 7:
 this.$ = instruccionesAPI.nuevoBreak(); 
break;
case 12:
 this.$ = instruccionesAPI.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 13:
 this.$ = instruccionesAPI.nuevoMientras($$[$0-2],$$[$0]); 
break;
case 14:
 this.$ = instruccionesAPI.nuevoDoMientras($$[$0-2],$$[$0-5]); 
break;
case 15:
 this.$ = instruccionesAPI.nuevoLlamar($$[$0-4],$$[$0-2]); 
break;
case 16:
 this.$ = instruccionesAPI.nuevoLlamar($$[$0-3],[]); 
break;
case 17:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 18:
 this.$ = [$$[$0]] 
break;
case 19:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0],TIPO_VALOR.VOID); 
break;
case 20:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-2],$$[$0-1],$$[$0],TIPO_VALOR.VOID); 
break;
case 21:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0],$$[$0-1]); 
break;
case 22:
this.$ = $$[$0-1];
break;
case 23:
this.$ = [];
break;
case 24:
 $$[$0-3].push(instruccionesAPI.nuevoParametro($$[$0-1],$$[$0])); this.$=$$[$0-3]; 
break;
case 25:
 this.$ = [instruccionesAPI.nuevoParametro($$[$0-1],$$[$0])]; 
break;
case 26:
 this.$ = TIPO_VALOR.ENTERO; 
break;
case 27:
 this.$ = TIPO_VALOR.DOUBLE; 
break;
case 28:
 this.$ = TIPO_VALOR.CARACTER; 
break;
case 29:
 this.$ = TIPO_VALOR.CADENA; 
break;
case 30:
 this.$ = TIPO_VALOR.BOOLEAN; 
break;
case 31:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]);
break;
case 32: case 33:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 34: case 46:
 this.$ = $$[$0-1]; 
break;
case 35:
 this.$ = []; 
break;
case 36:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.ENTERO,$$[$0-1]); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.ENTERO,instruccionesAPI.nuevoValor(0, TIPO_VALOR.ENTERO)); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.DOUBLE,$$[$0-1]); 
break;
case 39:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.DOUBLE,instruccionesAPI.nuevoValor(0.0, TIPO_VALOR.DOUBLE)); 
break;
case 40:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.CARACTER,$$[$0-1]); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.CARACTER,instruccionesAPI.nuevoValor('', TIPO_VALOR.CARACTER)); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.CADENA,$$[$0-1]); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.CADENA,instruccionesAPI.nuevoValor("", TIPO_VALOR.CADENA)); 
break;
case 44:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.BOOLEAN,$$[$0-1]); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.BOOLEAN,instruccionesAPI.nuevoValor('TRUE', TIPO_VALOR.BOOLEAN)); 
break;
case 47:
 this.$ = instruccionesAPI.nuevoAsignacion($$[$0-2],$$[$0]); 
break;
case 48:
 this.$ = instruccionesAPI.nuevoAsignacion([$$[$0-1]],instruccionesAPI.nuevoOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR),TIPO_OPERACION.INCREMENTO)); 
break;
case 49:
 this.$ = instruccionesAPI.nuevoAsignacion([$$[$0-1]],instruccionesAPI.nuevoOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR),TIPO_OPERACION.DECREMENTO)); 
break;
case 50:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 52:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.INCREMENTO); 
break;
case 53:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.DECREMENTO); 
break;
case 54:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 55:
 this.$=$$[$0]; 
break;
case 56:
 this.$ = instruccionesAPI.nuevoOperadorTernario($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoCasteo($$[$0-2],$$[$0]);
break;
case 73:
 this.$ = instruccionesAPI.nuevoCasteo(TIPO_VALOR.CADENA,$$[$0-1]);
break;
case 74:
 this.$ = instruccionesAPI.nuevoToLower($$[$0-1]); 
break;
case 75:
 this.$ = instruccionesAPI.nuevoToUpper($$[$0-1]); 
break;
case 76:
 this.$ = instruccionesAPI.nuevoRound($$[$0-1]); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoTypeOf($$[$0-1]); 
break;
case 78:
 this.$= $$[$0-1] 
break;
case 79:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 81:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DOUBLE); 
break;
case 83: case 84:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 86:
this.$ = TIPO_VALOR.ENTERO;
break;
case 87:
this.$ = TIPO_VALOR.DOUBLE;
break;
case 88:
this.$ = TIPO_VALOR.CARACTER;
break;
case 89:
this.$ = instruccionesAPI.nuevoImprimirLn($$[$0-2]);
break;
case 90:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:11,16:$V1,19:17,22:$V2,23:$V3,24:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,41:25,74:$Vb,75:$Vc},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:11,16:$V1,19:17,22:$V2,23:$V3,24:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,41:25,74:$Vb,75:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),{11:[1,28]},o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),{24:$Ve,41:29},{24:$Ve,41:31},{24:$Ve,41:32},{24:$Ve,41:33},{24:$Ve,41:34},{11:[1,35]},{17:[1,36]},{17:[1,37]},{17:[1,38]},o($Vf,$Vg,{27:39,17:[1,40],43:$Vh,44:$Vi}),{17:[1,43]},{21:44,39:$Vj},{17:[1,46]},{26:$Vk,42:[1,47]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,7]),{11:[1,50],26:$Vk,42:[1,49]},o($Vl,$Vg),{11:[1,52],26:$Vk,42:[1,51]},{11:[1,54],26:$Vk,42:[1,53]},{11:[1,56],26:$Vk,42:[1,55]},{11:[1,58],26:$Vk,42:[1,57]},o($Vm,[2,46]),{17:$Vn,18:59,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:76,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:77,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{21:79,28:[1,78],39:$Vj},{17:$Vn,18:83,20:[1,81],24:$Vo,25:80,30:84,31:82,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($VH,[2,48]),o($VH,[2,49]),{17:$Vn,18:90,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{22:[1,91]},{4:92,6:3,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:11,16:$V1,19:17,22:$V2,23:$V3,24:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,40:[1,93],41:25,74:$Vb,75:$Vc},{7:94,19:17,24:$VI,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,41:25},{17:$Vn,18:96,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{24:[1,97]},{17:$Vn,18:98,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vm,[2,37]),{17:$Vn,18:99,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vm,[2,39]),{17:$Vn,18:100,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vm,[2,41]),{17:$Vn,18:101,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vm,[2,43]),{17:$Vn,18:102,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vm,[2,45]),{20:[1,103],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{17:$Vn,18:121,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($V_,[2,55]),{17:$Vn,18:122,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:124,24:$Vo,32:[1,125],33:[1,126],34:[1,127],45:61,46:$Vp,59:$Vq,62:123,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:[1,128]},{17:[1,129]},{17:[1,130]},{17:[1,131]},{17:[1,132]},o($V_,[2,79]),o($V_,[2,80]),o($V_,[2,81]),o($V_,[2,82]),o($V_,[2,83]),o($V_,[2,84]),o($V_,[2,85]),{20:[1,133],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{20:[1,134],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{29:[1,135],30:136,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG},o($Vd,[2,20]),{20:[1,137],26:[1,138]},o($V$,[2,23],{11:[1,139]}),{20:[1,140],26:[1,141]},o($V01,[2,18],{43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),{24:[1,142]},o($V11,[2,26]),o($V11,[2,27]),o($V11,[2,28]),o($V11,[2,29]),o($V11,[2,30]),{20:[1,143],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{17:[1,144]},{6:27,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:11,16:$V1,19:17,22:$V2,23:$V3,24:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,40:[1,145],41:25,74:$Vb,75:$Vc},o($V21,[2,35]),{17:$Vn,18:146,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vf,$Vg,{43:$Vh,44:$Vi}),o($VH,[2,47],{43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),o($Vl,[2,50]),{11:[1,147],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{11:[1,148],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{11:[1,149],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{11:[1,150],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{11:[1,151],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{11:[1,152]},{17:$Vn,18:153,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:154,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:155,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:156,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:157,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:158,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:159,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:160,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:161,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:162,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:163,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:164,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:165,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:166,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:167,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($V_,[2,52]),o($V_,[2,53]),o($V31,[2,54],{43:$VJ,44:$VK,51:$VQ,52:$VR}),o($V31,[2,69],{43:$VJ,44:$VK,51:$VQ,52:$VR}),{20:[1,168]},{20:[1,169],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{20:[2,86]},{20:[2,87]},{20:[2,88]},{17:$Vn,18:170,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:171,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:172,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:173,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{17:$Vn,18:174,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{11:[1,175]},{21:176,39:$Vj},{21:177,39:$Vj},{21:178,39:$Vj},{11:[1,179]},{17:$Vn,18:180,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vd,[2,16]),o($V$,[2,22]),{30:181,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG},o($V01,[2,25]),{21:182,39:$Vj},{17:$Vn,18:183,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($V21,[2,34]),{11:[1,184],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},o($Vm,[2,36]),o($Vm,[2,38]),o($Vm,[2,40]),o($Vm,[2,42]),o($Vm,[2,44]),o($Vd,[2,89]),{28:[1,185],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},o($V41,[2,57],{43:$VJ,44:$VK,49:$VO,50:$VP,51:$VQ,52:$VR}),o($V41,[2,58],{43:$VJ,44:$VK,49:$VO,50:$VP,51:$VQ,52:$VR}),o($V31,[2,59],{43:$VJ,44:$VK,51:$VQ,52:$VR}),o($V31,[2,60],{43:$VJ,44:$VK,51:$VQ,52:$VR}),o($V51,[2,61],{43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),o($V51,[2,62],{43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),o($V61,[2,63],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,55:$VU,56:$VV,57:$VW,58:$VX}),o($V61,[2,64],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,55:$VU,56:$VV,57:$VW,58:$VX}),o($V71,[2,65],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR}),o($V71,[2,66],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR}),o($V71,[2,67],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR}),o($V71,[2,68],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR}),o([11,20,26,28,47,60,61],[2,70],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX}),o([11,20,26,28,47,61],[2,71],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY}),{17:$Vn,18:186,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($V_,[2,78]),{20:[1,187],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{20:[1,188],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{20:[1,189],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{20:[1,190],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{20:[1,191],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},o($Vd,[2,90]),o($Vd,[2,31],{38:[1,192]}),o($Vd,[2,19]),o($Vd,[2,21]),o($Vd,[2,15]),o($V01,[2,17],{43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),{24:[1,193]},o($Vd,[2,13]),{20:[1,194],43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ},{19:195,24:$VI,41:25},{17:$Vn,18:196,24:$Vo,45:61,46:$Vp,59:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($V51,[2,72],{43:$VJ,44:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),o($V_,[2,73]),o($V_,[2,74]),o($V_,[2,75]),o($V_,[2,76]),o($V_,[2,77]),{9:198,21:197,37:$Va,39:$Vj},o($V01,[2,24]),{11:[1,199]},{20:[1,200]},o([11,20,26,28,47],[2,56],{43:$VJ,44:$VK,46:$VL,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,60:$VY,61:$VZ}),o($Vd,[2,32]),o($Vd,[2,33]),o($Vd,[2,14]),{21:201,39:$Vj},o($Vd,[2,12])],
defaultActions: {26:[2,1],125:[2,86],126:[2,87],127:[2,88]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 5:return "INT";
break;
case 6:return "DOUBLE";
break;
case 7:return "BOOLEAN";
break;
case 8:return "CHAR";
break;
case 9:return "STRING";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return 11;
break;
case 13:return 26;
break;
case 14:return 37;
break;
case 15:return 38;
break;
case 16:return 'SWITCH';
break;
case 17:return 'CASE';
break;
case 18:return 'DEFAULT';
break;
case 19:return 10;
break;
case 20:return 22;
break;
case 21:return 16;
break;
case 22:return 23;
break;
case 23:return 'CONTINUE';
break;
case 24:return 'RETURN';
break;
case 25:return 75;
break;
case 26:return 74;
break;
case 27:return 64;
break;
case 28:return 65;
break;
case 29:return 66;
break;
case 30:return 'LENGTH';
break;
case 31:return 67;
break;
case 32:return 63;
break;
case 33:return 'TOCHARARRAY';
break;
case 34:return 'RUN';
break;
case 35:return 29;
break;
case 36:return "INCREMENTO";
break;
case 37:return "DECREMENTO";
break;
case 38:return "MAS";
break;
case 39:return "MENOS";
break;
case 40:return "POR";
break;
case 41:return "DIVIDIR";
break;
case 42:return "POTENCIA";
break;
case 43:return "MODULO";
break;
case 44:return 53;
break;
case 45:return 56;
break;
case 46:return 58;
break;
case 47:return 55;                     
break;
case 48:return 57;
break;
case 49:return 54;
break;
case 50:return 42;
break;
case 51:return 61;
break;
case 52:return 60;
break;
case 53:return 59;
break;
case 54:return 47;
break;
case 55:return 28;
break;
case 56:return 17;
break;
case 57:return 20;
break;
case 58:return 39;
break;
case 59:return 40;
break;
case 60:return 'C_ABRE';
break;
case 61:return 'C_CIERRA';
break;
case 62:return 71;
break;
case 63:return 68;
break;
case 64:return 24;
break;
case 65:return 5;
break;
case 66:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:'(\\(n|"|'|\\|t|r)|.)')/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}