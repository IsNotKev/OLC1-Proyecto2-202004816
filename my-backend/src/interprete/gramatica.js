/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,21],$V2=[1,22],$V3=[1,17],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,20],$Va=[1,18],$Vb=[1,19],$Vc=[5,10,15,20,21,29,30,31,32,33,34,37,71,72],$Vd=[1,27],$Ve=[1,33],$Vf=[2,48],$Vg=[1,43],$Vh=[11,23,39],$Vi=[1,58],$Vj=[1,70],$Vk=[1,55],$Vl=[1,57],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,114],$VD=[1,115],$VE=[1,101],$VF=[1,99],$VG=[1,100],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[1,106],$VM=[1,107],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[11,18,23,25,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58],$VU=[25,36],$VV=[18,23],$VW=[21,36],$VX=[5,10,15,20,21,29,30,31,32,33,34,35,37,71,72],$VY=[11,18,23,25,43,44,45,46,47,50,51,52,53,54,55,57,58],$VZ=[11,18,23,25,43,44,45,50,51,52,53,54,55,57,58],$V_=[11,18,23,25],$V$=[11,18,23,25,44,50,51,57,58],$V01=[11,18,23,25,44,50,51,52,53,54,55,57,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"declaracion":7,"print":8,"if":9,"BREAK":10,"PUNTOYCOMA":11,"metodo":12,"llamado":13,"while":14,"WHILE":15,"PAR_ABRE":16,"expresion":17,"PAR_CIERRA":18,"statement":19,"DO":20,"IDENTIFICADOR":21,"pp":22,"COMA":23,"pars":24,"DOSPUNTOS":25,"VOID":26,"tipos":27,"parametros":28,"INT":29,"DOUBLE":30,"CHAR":31,"STRING":32,"BOOLEAN":33,"IF":34,"ELSE":35,"LLAVE_ABRE":36,"LLAVE_CIERRA":37,"listaid":38,"IGUAL":39,"INCREMENTO":40,"DECREMENTO":41,"mmuno":42,"MENOS":43,"INTERROGACION":44,"MAS":45,"POR":46,"DIVIDIR":47,"POTENCIA":48,"MODULO":49,"D_IGUAL":50,"DIFERENTE":51,"MAYOR_IGUAL":52,"MENOR_IGUAL":53,"MAYOR":54,"MENOR":55,"NOT":56,"AND":57,"OR":58,"nums":59,"TOSTRING":60,"TOLOWER":61,"TOUPPER":62,"ROUND":63,"TYPEOF":64,"ENTERO":65,"CADENA":66,"CARACTER":67,"DECIMAL":68,"TRUE":69,"FALSE":70,"PRINTLN":71,"PRINT":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"BREAK",11:"PUNTOYCOMA",15:"WHILE",16:"PAR_ABRE",18:"PAR_CIERRA",20:"DO",21:"IDENTIFICADOR",23:"COMA",25:"DOSPUNTOS",26:"VOID",29:"INT",30:"DOUBLE",31:"CHAR",32:"STRING",33:"BOOLEAN",34:"IF",35:"ELSE",36:"LLAVE_ABRE",37:"LLAVE_CIERRA",39:"IGUAL",40:"INCREMENTO",41:"DECREMENTO",43:"MENOS",44:"INTERROGACION",45:"MAS",46:"POR",47:"DIVIDIR",48:"POTENCIA",49:"MODULO",50:"D_IGUAL",51:"DIFERENTE",52:"MAYOR_IGUAL",53:"MENOR_IGUAL",54:"MAYOR",55:"MENOR",56:"NOT",57:"AND",58:"OR",60:"TOSTRING",61:"TOLOWER",62:"TOUPPER",63:"ROUND",64:"TYPEOF",65:"ENTERO",66:"CADENA",67:"CARACTER",68:"DECIMAL",69:"TRUE",70:"FALSE",71:"PRINTLN",72:"PRINT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[14,5],[14,7],[13,5],[13,4],[22,3],[22,1],[12,5],[12,3],[12,5],[24,3],[24,2],[28,4],[28,2],[27,1],[27,1],[27,1],[27,1],[27,1],[9,5],[9,7],[9,7],[19,3],[19,2],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,5],[7,3],[7,4],[7,3],[7,3],[38,3],[38,1],[42,2],[42,2],[17,2],[17,1],[17,5],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,3],[17,4],[17,4],[17,4],[17,4],[17,4],[17,4],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[59,1],[59,1],[59,1],[8,5],[8,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 48:
this.$=[$$[$0]]
break;
case 7:
 this.$ = instruccionesAPI.nuevoBreak(); 
break;
case 11:
 this.$ = instruccionesAPI.nuevoMientras($$[$0-2],$$[$0]); 
break;
case 12:
 this.$ = instruccionesAPI.nuevoDoMientras($$[$0-2],$$[$0-5]); 
break;
case 13:
 this.$ = instruccionesAPI.nuevoLlamar($$[$0-4],$$[$0-2]); 
break;
case 14:
 this.$ = instruccionesAPI.nuevoLlamar($$[$0-3],[]); 
break;
case 15:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 16:
 this.$ = [$$[$0]] 
break;
case 17:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0],TIPO_VALOR.VOID); 
break;
case 18:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-2],$$[$0-1],$$[$0],TIPO_VALOR.VOID); 
break;
case 19:
 this.$ = instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0],$$[$0-1]); 
break;
case 20:
this.$ = $$[$0-1];
break;
case 21:
this.$ = [];
break;
case 22:
 $$[$0-3].push(instruccionesAPI.nuevoParametro($$[$0-1],$$[$0])); this.$=$$[$0-3]; 
break;
case 23:
 this.$ = [instruccionesAPI.nuevoParametro($$[$0-1],$$[$0])]; 
break;
case 24:
 this.$ = TIPO_VALOR.ENTERO; 
break;
case 25:
 this.$ = TIPO_VALOR.DOUBLE; 
break;
case 26:
 this.$ = TIPO_VALOR.CARACTER; 
break;
case 27:
 this.$ = TIPO_VALOR.CADENA; 
break;
case 28:
 this.$ = TIPO_VALOR.BOOLEAN; 
break;
case 29:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]);
break;
case 30: case 31:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 32:
 this.$ = $$[$0-1]; 
break;
case 33:
 this.$ = []; 
break;
case 34:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.ENTERO,$$[$0-1]); 
break;
case 35:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.ENTERO,instruccionesAPI.nuevoValor(0, TIPO_VALOR.ENTERO)); 
break;
case 36:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.DOUBLE,$$[$0-1]); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.DOUBLE,instruccionesAPI.nuevoValor(0.0, TIPO_VALOR.DOUBLE)); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.CARACTER,$$[$0-1]); 
break;
case 39:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.CARACTER,instruccionesAPI.nuevoValor('', TIPO_VALOR.CARACTER)); 
break;
case 40:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.CADENA,$$[$0-1]); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.CADENA,instruccionesAPI.nuevoValor("", TIPO_VALOR.CADENA)); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-3], TIPO_DATO.BOOLEAN,$$[$0-1]); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], TIPO_DATO.BOOLEAN,instruccionesAPI.nuevoValor('TRUE', TIPO_VALOR.BOOLEAN)); 
break;
case 44:
 this.$ = instruccionesAPI.nuevoAsignacion($$[$0-3],$$[$0-1]); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoAsignacion([$$[$0-2]],instruccionesAPI.nuevoOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-2], TIPO_VALOR.IDENTIFICADOR),TIPO_OPERACION.INCREMENTO)); 
break;
case 46:
 this.$ = instruccionesAPI.nuevoAsignacion([$$[$0-2]],instruccionesAPI.nuevoOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-2], TIPO_VALOR.IDENTIFICADOR),TIPO_OPERACION.DECREMENTO)); 
break;
case 47:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 49:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.INCREMENTO); 
break;
case 50:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.DECREMENTO); 
break;
case 51:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 52:
 this.$=$$[$0]; 
break;
case 53:
 this.$ = instruccionesAPI.nuevoOperadorTernario($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 54:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoCasteo($$[$0-2],$$[$0]);
break;
case 70:
 this.$ = instruccionesAPI.nuevoCasteo(TIPO_VALOR.CADENA,$$[$0-1]);
break;
case 71:
 this.$ = instruccionesAPI.nuevoToLower($$[$0-1]); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoToUpper($$[$0-1]); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoRound($$[$0-1]); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoTypeOf($$[$0-1]); 
break;
case 75:
 this.$= $$[$0-1] 
break;
case 76:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DOUBLE); 
break;
case 80: case 81:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 83:
this.$ = TIPO_VALOR.ENTERO;
break;
case 84:
this.$ = TIPO_VALOR.DOUBLE;
break;
case 85:
this.$ = TIPO_VALOR.CARACTER;
break;
case 86:
this.$ = instruccionesAPI.nuevoImprimirLn($$[$0-2]);
break;
case 87:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:$V1,20:$V2,21:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,38:16,71:$Va,72:$Vb},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:$V1,20:$V2,21:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,38:16,71:$Va,72:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{11:[1,25]},o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),{21:$Vd,38:26},{21:$Vd,38:28},{21:$Vd,38:29},{21:$Vd,38:30},{21:$Vd,38:31},{23:$Ve,39:[1,32]},o([23,39],$Vf,{24:36,16:[1,37],40:[1,34],41:[1,35]}),{16:[1,38]},{16:[1,39]},{16:[1,40]},{16:[1,41]},{19:42,36:$Vg},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,7]),{11:[1,45],23:$Ve,39:[1,44]},o($Vh,$Vf),{11:[1,47],23:$Ve,39:[1,46]},{11:[1,49],23:$Ve,39:[1,48]},{11:[1,51],23:$Ve,39:[1,50]},{11:[1,53],23:$Ve,39:[1,52]},{16:$Vi,17:54,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{21:[1,71]},{11:[1,72]},{11:[1,73]},{19:75,25:[1,74],36:$Vg},{16:$Vi,17:79,18:[1,77],21:$Vj,22:76,27:80,28:78,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:86,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:87,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:88,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:89,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{15:[1,90]},{4:91,6:3,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:$V1,20:$V2,21:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,37:[1,92],38:16,71:$Va,72:$Vb},{16:$Vi,17:93,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($Vc,[2,35]),{16:$Vi,17:94,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($Vc,[2,37]),{16:$Vi,17:95,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($Vc,[2,39]),{16:$Vi,17:96,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($Vc,[2,41]),{16:$Vi,17:97,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($Vc,[2,43]),{11:[1,98],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{16:$Vi,17:116,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($VT,[2,52]),{16:$Vi,17:117,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:119,21:$Vj,29:[1,120],30:[1,121],31:[1,122],42:56,43:$Vk,56:$Vl,59:118,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:[1,123]},{16:[1,124]},{16:[1,125]},{16:[1,126]},{16:[1,127]},o($VT,[2,76]),o($VT,[2,77]),o($VT,[2,78]),o($VT,[2,79]),o($VT,[2,80]),o($VT,[2,81]),o($VT,[2,82]),o($Vh,[2,47]),o($Vc,[2,45]),o($Vc,[2,46]),{26:[1,128],27:129,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB},o($Vc,[2,18]),{18:[1,130],23:[1,131]},o($VU,[2,21],{11:[1,132]}),{18:[1,133],23:[1,134]},o($VV,[2,16],{40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS}),{21:[1,135]},o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),{18:[1,136],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,137],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,138],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,139],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{16:[1,140]},{6:24,7:4,8:5,9:6,10:$V0,12:8,13:9,14:10,15:$V1,20:$V2,21:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,37:[1,141],38:16,71:$Va,72:$Vb},o($VX,[2,33]),{11:[1,142],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{11:[1,143],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{11:[1,144],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{11:[1,145],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{11:[1,146],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},o($Vc,[2,44]),{16:$Vi,17:147,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:148,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:149,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:150,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:151,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:152,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:153,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:154,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:155,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:156,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:157,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:158,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:159,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:160,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:161,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($VT,[2,49]),o($VT,[2,50]),o($VY,[2,51],{40:$VC,41:$VD,48:$VJ,49:$VK}),o($VY,[2,66],{40:$VC,41:$VD,48:$VJ,49:$VK}),{18:[1,162]},{18:[1,163],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[2,83]},{18:[2,84]},{18:[2,85]},{16:$Vi,17:164,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:165,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:166,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:167,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{16:$Vi,17:168,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{19:169,36:$Vg},{19:170,36:$Vg},{11:[1,171]},{16:$Vi,17:172,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($Vc,[2,14]),o($VU,[2,20]),{27:173,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB},o($VV,[2,23]),{11:[1,174]},{11:[1,175]},{19:176,36:$Vg},{19:177,36:$Vg},{16:$Vi,17:178,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($VX,[2,32]),o($Vc,[2,34]),o($Vc,[2,36]),o($Vc,[2,38]),o($Vc,[2,40]),o($Vc,[2,42]),{25:[1,179],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},o($VZ,[2,54],{40:$VC,41:$VD,46:$VH,47:$VI,48:$VJ,49:$VK}),o($VZ,[2,55],{40:$VC,41:$VD,46:$VH,47:$VI,48:$VJ,49:$VK}),o($VY,[2,56],{40:$VC,41:$VD,48:$VJ,49:$VK}),o($VY,[2,57],{40:$VC,41:$VD,48:$VJ,49:$VK}),o($V_,[2,58],{40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS}),o($V_,[2,59],{40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS}),o($V$,[2,60],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,52:$VN,53:$VO,54:$VP,55:$VQ}),o($V$,[2,61],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,52:$VN,53:$VO,54:$VP,55:$VQ}),o($V01,[2,62],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($V01,[2,63],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($V01,[2,64],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($V01,[2,65],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o([11,18,23,25,44,57,58],[2,67],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ}),o([11,18,23,25,44,58],[2,68],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR}),{16:$Vi,17:180,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($VT,[2,75]),{18:[1,181],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,182],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,183],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,184],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{18:[1,185],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},o($Vc,[2,17]),o($Vc,[2,19]),o($Vc,[2,13]),o($VV,[2,15],{40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS}),{21:[1,186]},o($Vc,[2,86]),o($Vc,[2,87]),o($Vc,[2,29],{35:[1,187]}),o($Vc,[2,11]),{18:[1,188],40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS},{16:$Vi,17:189,21:$Vj,42:56,43:$Vk,56:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($V_,[2,69],{40:$VC,41:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS}),o($VT,[2,70]),o($VT,[2,71]),o($VT,[2,72]),o($VT,[2,73]),o($VT,[2,74]),o($VV,[2,22]),{9:191,19:190,34:$V9,36:$Vg},{11:[1,192]},o([11,18,23,25,44],[2,53],{40:$VC,41:$VD,43:$VE,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,57:$VR,58:$VS}),o($Vc,[2,30]),o($Vc,[2,31]),o($Vc,[2,12])],
defaultActions: {23:[2,1],120:[2,83],121:[2,84],122:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 5:return "INT";
break;
case 6:return "DOUBLE";
break;
case 7:return "BOOLEAN";
break;
case 8:return "CHAR";
break;
case 9:return "STRING";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return 11;
break;
case 13:return 23;
break;
case 14:return 34;
break;
case 15:return 35;
break;
case 16:return 'SWITCH';
break;
case 17:return 'CASE';
break;
case 18:return 'DEFAULT';
break;
case 19:return 10;
break;
case 20:return 15;
break;
case 21:return 'FOR';
break;
case 22:return 20;
break;
case 23:return 'CONTINUE';
break;
case 24:return 'RETURN';
break;
case 25:return 72;
break;
case 26:return 71;
break;
case 27:return 61;
break;
case 28:return 62;
break;
case 29:return 63;
break;
case 30:return 'LENGTH';
break;
case 31:return 64;
break;
case 32:return 60;
break;
case 33:return 'TOCHARARRAY';
break;
case 34:return 'RUN';
break;
case 35:return 26;
break;
case 36:return "INCREMENTO";
break;
case 37:return "DECREMENTO";
break;
case 38:return "MAS";
break;
case 39:return "MENOS";
break;
case 40:return "POR";
break;
case 41:return "DIVIDIR";
break;
case 42:return "POTENCIA";
break;
case 43:return "MODULO";
break;
case 44:return 50;
break;
case 45:return 53;
break;
case 46:return 55;
break;
case 47:return 52;                     
break;
case 48:return 54;
break;
case 49:return 51;
break;
case 50:return 39;
break;
case 51:return 58;
break;
case 52:return 57;
break;
case 53:return 56;
break;
case 54:return 44;
break;
case 55:return 25;
break;
case 56:return 16;
break;
case 57:return 18;
break;
case 58:return 36;
break;
case 59:return 37;
break;
case 60:return 'C_ABRE';
break;
case 61:return 'C_CIERRA';
break;
case 62:return 68;
break;
case 63:return 65;
break;
case 64:return 21;
break;
case 65:return 5;
break;
case 66:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:'(\\(n|"|'|\\|t|r)|.)')/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}